(function() {var implementors = {};
implementors["chalk"] = [{"text":"impl Send for Args","synthetic":true,"types":[]},{"text":"impl !Send for LoadedProgram","synthetic":true,"types":[]}];
implementors["chalk_derive"] = [{"text":"impl Send for DeriveKind","synthetic":true,"types":[]}];
implementors["chalk_engine"] = [{"text":"impl&lt;I&gt; Send for AnswerResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Forest&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; !Send for ForestSolver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl Send for RootSearchFail","synthetic":true,"types":[]},{"text":"impl Send for SubGoalSelection","synthetic":true,"types":[]},{"text":"impl Send for NoRemainingSubgoalsResult","synthetic":true,"types":[]},{"text":"impl&lt;'forest, I&gt; !Send for SolveState&lt;'forest, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'table, 'i, I&gt; Send for DeepNormalizer&lt;'table, 'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'intern, I&gt; Send for AntiUnifier&lt;'infer, 'intern, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; !Send for AnswerSubstitutor&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SlgContext&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; !Send for SlgContextOps&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Send for MayInvalidate&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SLGSolver&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Stack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for StackDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StackIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StackEntry&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Strand&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SelectedSubgoal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Table&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AnswerIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Tables&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TableIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TimeStamp","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FlounderedSubgoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Answer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CompleteAnswer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Literal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Minimums","synthetic":true,"types":[]},{"text":"impl Send for AnswerMode","synthetic":true,"types":[]}];
implementors["chalk_integration"] = [{"text":"impl !Send for ChalkDatabase","synthetic":true,"types":[]},{"text":"impl Send for ChalkError","synthetic":true,"types":[]},{"text":"impl Send for RustIrError","synthetic":true,"types":[]},{"text":"impl Send for RawId","synthetic":true,"types":[]},{"text":"impl Send for ChalkFnAbi","synthetic":true,"types":[]},{"text":"impl Send for ChalkIr","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Send for Env&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Send for AssociatedTyLookup","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Send for TypeLookup&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProgramLowerer","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for ProgramEnvironment","synthetic":true,"types":[]},{"text":"impl Send for Lowering","synthetic":true,"types":[]},{"text":"impl Send for ProgramTextQuery","synthetic":true,"types":[]},{"text":"impl Send for SolverChoiceQuery","synthetic":true,"types":[]},{"text":"impl Send for ProgramIrQuery","synthetic":true,"types":[]},{"text":"impl Send for CoherenceQuery","synthetic":true,"types":[]},{"text":"impl Send for OrphanCheckQuery","synthetic":true,"types":[]},{"text":"impl Send for CheckedProgramQuery","synthetic":true,"types":[]},{"text":"impl Send for EnvironmentQuery","synthetic":true,"types":[]},{"text":"impl Send for SolverQuery","synthetic":true,"types":[]},{"text":"impl !Send for LoweringDatabaseGroupStorage__","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ArcEq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TypeSort","synthetic":true,"types":[]},{"text":"impl Send for Unit","synthetic":true,"types":[]},{"text":"impl Send for TypeKind","synthetic":true,"types":[]},{"text":"impl Send for SolverChoice","synthetic":true,"types":[]}];
implementors["chalk_ir"] = [{"text":"impl&lt;T, U&gt; !Send for VecMappedInPlace&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Send for Shifter&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Send for DownShifter&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'i, I&gt; Send for Subst&lt;'s, 'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Send for FindFreeVarsVisitor&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Send for ControlFlow&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, IT, U&gt; Send for Casted&lt;'i, IT, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IT: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as HasInterner&gt;::Interner: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for VariableKindsDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for VariableKindsInnerDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for GoalsDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for GenericArgDataInnerDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for ProgramClauseImplicationDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for TyKindDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for SubstitutionDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Send for SeparatorTraitRef&lt;'me, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'me, I&gt; Send for SeparatorTraitRefDebug&lt;'a, 'me, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for ProjectionTyDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for OpaqueTyDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Angle&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CanonicalDisplay&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasInterner&gt;::Interner: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Void","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FallibleOrFloundered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoSolution","synthetic":true,"types":[]},{"text":"impl Send for Floundered","synthetic":true,"types":[]},{"text":"impl Send for Variance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Environment&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for InEnvironment&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;G as HasInterner&gt;::Interner as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IntTy","synthetic":true,"types":[]},{"text":"impl Send for UintTy","synthetic":true,"types":[]},{"text":"impl Send for FloatTy","synthetic":true,"types":[]},{"text":"impl Send for Scalar","synthetic":true,"types":[]},{"text":"impl Send for Safety","synthetic":true,"types":[]},{"text":"impl Send for Mutability","synthetic":true,"types":[]},{"text":"impl Send for UniverseIndex","synthetic":true,"types":[]},{"text":"impl Send for UniverseMap","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AdtId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TraitId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ImplId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ClauseId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AssocTypeId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OpaqueTyId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ClosureId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GeneratorId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ForeignDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Ty&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TyData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TypeFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TyKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BoundVar","synthetic":true,"types":[]},{"text":"impl Send for DebruijnIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DynTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InferenceVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnSig&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnPointer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Const&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ConstData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ConstValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ConcreteConst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Lifetime&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for LifetimeData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PlaceholderIndex","synthetic":true,"types":[]},{"text":"impl Send for TyVariableKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for VariableKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GenericArg&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GenericArgData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for WithKind&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AliasTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ProjectionTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OpaqueTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TraitRef&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for LifetimeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TypeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhereClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WellFormed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FromEnv&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DomainGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for EqGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SubtypeGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Normalize&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AliasEq&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Binders&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for BindersIntoIterator&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;V as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as IntoIterator&gt;::IntoIter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ProgramClauseImplication&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ClausePriority","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ProgramClauseData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ProgramClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClause: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Canonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UCanonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Goal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GoalData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for QuantifierKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Constraint&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, A&gt; Send for SubstFolder&lt;'i, I, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for QuantifiedWhereClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ProgramClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for VariableKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CanonicalVarKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Goals&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Constraints&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Substitution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Variances&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariances: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ConstrainedSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AnswerSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chalk_parse"] = [{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Program","synthetic":true,"types":[]},{"text":"impl Send for Item","synthetic":true,"types":[]},{"text":"impl Send for ForeignDefn","synthetic":true,"types":[]},{"text":"impl Send for AdtDefn","synthetic":true,"types":[]},{"text":"impl Send for Variant","synthetic":true,"types":[]},{"text":"impl Send for Movability","synthetic":true,"types":[]},{"text":"impl Send for GeneratorDefn","synthetic":true,"types":[]},{"text":"impl Send for AdtFlags","synthetic":true,"types":[]},{"text":"impl Send for AdtKind","synthetic":true,"types":[]},{"text":"impl Send for AdtReprAttr","synthetic":true,"types":[]},{"text":"impl Send for AdtRepr","synthetic":true,"types":[]},{"text":"impl Send for FnSig","synthetic":true,"types":[]},{"text":"impl Send for FnDefn","synthetic":true,"types":[]},{"text":"impl Send for ClosureDefn","synthetic":true,"types":[]},{"text":"impl Send for FnAbi","synthetic":true,"types":[]},{"text":"impl Send for TraitDefn","synthetic":true,"types":[]},{"text":"impl Send for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl Send for TraitFlags","synthetic":true,"types":[]},{"text":"impl Send for AssocTyDefn","synthetic":true,"types":[]},{"text":"impl Send for OpaqueTyDefn","synthetic":true,"types":[]},{"text":"impl Send for VariableKind","synthetic":true,"types":[]},{"text":"impl Send for GenericArg","synthetic":true,"types":[]},{"text":"impl Send for Const","synthetic":true,"types":[]},{"text":"impl Send for InlineBound","synthetic":true,"types":[]},{"text":"impl Send for QuantifiedInlineBound","synthetic":true,"types":[]},{"text":"impl Send for TraitBound","synthetic":true,"types":[]},{"text":"impl Send for AliasEqBound","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for Impl","synthetic":true,"types":[]},{"text":"impl Send for ImplType","synthetic":true,"types":[]},{"text":"impl Send for AssocTyValue","synthetic":true,"types":[]},{"text":"impl Send for Ty","synthetic":true,"types":[]},{"text":"impl Send for IntTy","synthetic":true,"types":[]},{"text":"impl Send for UintTy","synthetic":true,"types":[]},{"text":"impl Send for FloatTy","synthetic":true,"types":[]},{"text":"impl Send for ScalarType","synthetic":true,"types":[]},{"text":"impl Send for Mutability","synthetic":true,"types":[]},{"text":"impl Send for Safety","synthetic":true,"types":[]},{"text":"impl Send for Lifetime","synthetic":true,"types":[]},{"text":"impl Send for ProjectionTy","synthetic":true,"types":[]},{"text":"impl Send for TraitRef","synthetic":true,"types":[]},{"text":"impl Send for Polarity","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for WhereClause","synthetic":true,"types":[]},{"text":"impl Send for DomainGoal","synthetic":true,"types":[]},{"text":"impl Send for LeafGoal","synthetic":true,"types":[]},{"text":"impl Send for QuantifiedWhereClause","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Clause","synthetic":true,"types":[]},{"text":"impl Send for Goal","synthetic":true,"types":[]},{"text":"impl Send for ClosureKind","synthetic":true,"types":[]},{"text":"impl Send for FnArg","synthetic":true,"types":[]},{"text":"impl Send for FnArgs","synthetic":true,"types":[]},{"text":"impl Send for Variance","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Send for GoalParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProgramParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Send for TyParser","synthetic":true,"types":[]}];
implementors["chalk_recursive"] = [{"text":"impl Send for Outcome","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Obligation&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PositiveSolution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NegativeSolution","synthetic":true,"types":[]},{"text":"impl&lt;'s, I, Solver&gt; Send for Fulfill&lt;'s, I, Solver&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Solver: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for RecursiveContext&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; !Send for Solver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for RecursiveSolver&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SearchGraph&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DepthFirstNumber","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Node&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Stack","synthetic":true,"types":[]},{"text":"impl Send for StackDepth","synthetic":true,"types":[]},{"text":"impl Send for StackEntry","synthetic":true,"types":[]},{"text":"impl Send for Minimums","synthetic":true,"types":[]}];
implementors["chalk_solve"] = [{"text":"impl&lt;'me, I&gt; !Send for ClauseBuilder&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for UnsizeParameterCollector&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'p, I&gt; Send for ParameterOccurenceCheck&lt;'a, 'p, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, 'builder, I&gt; !Send for EnvElaborator&lt;'me, 'builder, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Send for Generalize&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for CoherenceSolver&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CoherenceError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SpecializationPriorities&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SpecializationPriority","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; !Send for DisplayRenderAsRust&lt;'a, I, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvertedBoundVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for UnifiedId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IdAliasStore&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IdAliases&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, DB:&nbsp;?Sized, P&gt; Send for WriterState&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for InternalWriterState&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB&gt; Send for StubWrapper&lt;'a, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; !Send for GoalBuilder&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Canonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasInterner&gt;::Interner: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Send for Canonicalizer&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Send for Inverter&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UCanonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, 'i, I&gt; Send for UCollector&lt;'q, 'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Send for UMapToCanonical&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Send for UMapFromCanonical&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; !Send for Unifier&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for RelationResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'u, 't, I&gt; !Send for OccursCheck&lt;'u, 't, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for EnaVariable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for InferenceValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for InferenceTable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for InferenceSnapshot&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, DB&gt; Send for IdCollector&lt;'i, I, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, DB, P&gt; Send for LoggingRustIrDatabase&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, W, DB, P&gt; Send for WriteOnDropRustIrDatabase&lt;I, W, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for RecordedItemId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DefId, AdtId&gt; Send for OrderedItemId&lt;'a, DefId, AdtId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AdtId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefId: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AssociatedTyValueId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ImplType","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DefaultImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DefaultImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AdtDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AdtKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AdtDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AdtVariantDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AdtFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AdtRepr&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnDefDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnDefInputsAndOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FnDefDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TraitDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TraitDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TraitFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for InlineBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TraitBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AliasEqBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AssociatedTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::Identifier: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AssociatedTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AssociatedTyValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AssociatedTyValueBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OpaqueTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OpaqueTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Movability","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GeneratorDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GeneratorInputOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GeneratorWitnessDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GeneratorWitnessExistential&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Polarity","synthetic":true,"types":[]},{"text":"impl Send for ClosureKind","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'i, I&gt; Send for TySizeVisitor&lt;'infer, 'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Solution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Guidance&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for SolutionDisplay&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SubstitutionResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WfError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for WfSolver&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Send for InputTypeCollector&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WfWellKnownConstraints","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()