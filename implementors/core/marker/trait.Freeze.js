(function() {var implementors = {};
implementors["chalk"] = [{"text":"impl Freeze for Args","synthetic":true,"types":[]},{"text":"impl !Freeze for LoadedProgram","synthetic":true,"types":[]}];
implementors["chalk_derive"] = [{"text":"impl Freeze for DeriveKind","synthetic":true,"types":[]}];
implementors["chalk_engine"] = [{"text":"impl&lt;I&gt; Freeze for AnswerResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Forest&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Freeze for ForestSolver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RootSearchFail","synthetic":true,"types":[]},{"text":"impl Freeze for SubGoalSelection","synthetic":true,"types":[]},{"text":"impl Freeze for NoRemainingSubgoalsResult","synthetic":true,"types":[]},{"text":"impl&lt;'forest, I&gt; Freeze for SolveState&lt;'forest, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'table, 'i, I&gt; Freeze for DeepNormalizer&lt;'table, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'intern, I&gt; Freeze for AntiUnifier&lt;'infer, 'intern, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; Freeze for AnswerSubstitutor&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SlgContext&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Freeze for SlgContextOps&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for MayInvalidate&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SLGSolver&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Stack&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for StackDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StackIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StackEntry&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Strand&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SelectedSubgoal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Table&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AnswerIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Tables&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TableIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TimeStamp","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FlounderedSubgoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Answer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CompleteAnswer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Literal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Minimums","synthetic":true,"types":[]},{"text":"impl Freeze for AnswerMode","synthetic":true,"types":[]}];
implementors["chalk_integration"] = [{"text":"impl !Freeze for ChalkDatabase","synthetic":true,"types":[]},{"text":"impl Freeze for ChalkError","synthetic":true,"types":[]},{"text":"impl Freeze for RustIrError","synthetic":true,"types":[]},{"text":"impl Freeze for RawId","synthetic":true,"types":[]},{"text":"impl Freeze for ChalkFnAbi","synthetic":true,"types":[]},{"text":"impl Freeze for ChalkIr","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Freeze for Env&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AssociatedTyLookup","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Freeze for TypeLookup&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ProgramLowerer","synthetic":true,"types":[]},{"text":"impl Freeze for Program","synthetic":true,"types":[]},{"text":"impl Freeze for ProgramEnvironment","synthetic":true,"types":[]},{"text":"impl Freeze for Lowering","synthetic":true,"types":[]},{"text":"impl Freeze for ProgramTextQuery","synthetic":true,"types":[]},{"text":"impl Freeze for SolverChoiceQuery","synthetic":true,"types":[]},{"text":"impl Freeze for ProgramIrQuery","synthetic":true,"types":[]},{"text":"impl Freeze for CoherenceQuery","synthetic":true,"types":[]},{"text":"impl Freeze for OrphanCheckQuery","synthetic":true,"types":[]},{"text":"impl Freeze for CheckedProgramQuery","synthetic":true,"types":[]},{"text":"impl Freeze for EnvironmentQuery","synthetic":true,"types":[]},{"text":"impl Freeze for SolverQuery","synthetic":true,"types":[]},{"text":"impl Freeze for LoweringDatabaseGroupStorage__","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ArcEq&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSort","synthetic":true,"types":[]},{"text":"impl Freeze for Unit","synthetic":true,"types":[]},{"text":"impl Freeze for TypeKind","synthetic":true,"types":[]},{"text":"impl Freeze for SolverChoice","synthetic":true,"types":[]}];
implementors["chalk_ir"] = [{"text":"impl&lt;T, U&gt; Freeze for VecMappedInPlace&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for Shifter&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for DownShifter&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'i, I&gt; Freeze for Subst&lt;'s, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for FindFreeVarsVisitor&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Freeze for ControlFlow&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, IT, U&gt; Freeze for Casted&lt;'i, IT, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IT: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for VariableKindsDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for VariableKindsInnerDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for GoalsDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for GenericArgDataInnerDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for ProgramClauseImplicationDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for TyKindDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for SubstitutionDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Freeze for SeparatorTraitRef&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'me, I&gt; Freeze for SeparatorTraitRefDebug&lt;'a, 'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for ProjectionTyDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for OpaqueTyDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Angle&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CanonicalDisplay&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Void","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FallibleOrFloundered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NoSolution","synthetic":true,"types":[]},{"text":"impl Freeze for Floundered","synthetic":true,"types":[]},{"text":"impl Freeze for Variance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Environment&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for InEnvironment&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;G as HasInterner&gt;::Interner as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IntTy","synthetic":true,"types":[]},{"text":"impl Freeze for UintTy","synthetic":true,"types":[]},{"text":"impl Freeze for FloatTy","synthetic":true,"types":[]},{"text":"impl Freeze for Scalar","synthetic":true,"types":[]},{"text":"impl Freeze for Safety","synthetic":true,"types":[]},{"text":"impl Freeze for Mutability","synthetic":true,"types":[]},{"text":"impl Freeze for UniverseIndex","synthetic":true,"types":[]},{"text":"impl Freeze for UniverseMap","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AdtId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TraitId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ImplId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ClauseId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AssocTypeId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for OpaqueTyId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ClosureId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GeneratorId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ForeignDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Ty&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TyData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TypeFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TyKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoundVar","synthetic":true,"types":[]},{"text":"impl Freeze for DebruijnIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DynTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InferenceVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnSig&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnPointer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Const&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ConstData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ConstValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ConcreteConst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Lifetime&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for LifetimeData&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PlaceholderIndex","synthetic":true,"types":[]},{"text":"impl Freeze for TyVariableKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for VariableKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GenericArg&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GenericArgData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for WithKind&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AliasTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ProjectionTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for OpaqueTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TraitRef&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for LifetimeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TypeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhereClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WellFormed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FromEnv&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DomainGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for EqGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SubtypeGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Normalize&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AliasEq&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Binders&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for BindersIntoIterator&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;V as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as IntoIterator&gt;::IntoIter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ProgramClauseImplication&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ClausePriority","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ProgramClauseData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ProgramClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClause: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Canonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UCanonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Goal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GoalData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for QuantifierKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Constraint&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, A&gt; Freeze for SubstFolder&lt;'i, I, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for QuantifiedWhereClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ProgramClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for VariableKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CanonicalVarKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Goals&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Constraints&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Substitution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Variances&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariances: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ConstrainedSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AnswerSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chalk_parse"] = [{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Program","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignDefn","synthetic":true,"types":[]},{"text":"impl Freeze for AdtDefn","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for Movability","synthetic":true,"types":[]},{"text":"impl Freeze for GeneratorDefn","synthetic":true,"types":[]},{"text":"impl Freeze for AdtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for AdtKind","synthetic":true,"types":[]},{"text":"impl Freeze for AdtReprAttr","synthetic":true,"types":[]},{"text":"impl Freeze for AdtRepr","synthetic":true,"types":[]},{"text":"impl Freeze for FnSig","synthetic":true,"types":[]},{"text":"impl Freeze for FnDefn","synthetic":true,"types":[]},{"text":"impl Freeze for ClosureDefn","synthetic":true,"types":[]},{"text":"impl Freeze for FnAbi","synthetic":true,"types":[]},{"text":"impl Freeze for TraitDefn","synthetic":true,"types":[]},{"text":"impl Freeze for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TraitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for AssocTyDefn","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueTyDefn","synthetic":true,"types":[]},{"text":"impl Freeze for VariableKind","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArg","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for InlineBound","synthetic":true,"types":[]},{"text":"impl Freeze for QuantifiedInlineBound","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for AliasEqBound","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for ImplType","synthetic":true,"types":[]},{"text":"impl Freeze for AssocTyValue","synthetic":true,"types":[]},{"text":"impl Freeze for Ty","synthetic":true,"types":[]},{"text":"impl Freeze for IntTy","synthetic":true,"types":[]},{"text":"impl Freeze for UintTy","synthetic":true,"types":[]},{"text":"impl Freeze for FloatTy","synthetic":true,"types":[]},{"text":"impl Freeze for ScalarType","synthetic":true,"types":[]},{"text":"impl Freeze for Mutability","synthetic":true,"types":[]},{"text":"impl Freeze for Safety","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for ProjectionTy","synthetic":true,"types":[]},{"text":"impl Freeze for TraitRef","synthetic":true,"types":[]},{"text":"impl Freeze for Polarity","synthetic":true,"types":[]},{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl Freeze for DomainGoal","synthetic":true,"types":[]},{"text":"impl Freeze for LeafGoal","synthetic":true,"types":[]},{"text":"impl Freeze for QuantifiedWhereClause","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Clause","synthetic":true,"types":[]},{"text":"impl Freeze for Goal","synthetic":true,"types":[]},{"text":"impl Freeze for ClosureKind","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for FnArgs","synthetic":true,"types":[]},{"text":"impl Freeze for Variance","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Freeze for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Freeze for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for GoalParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Freeze for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Freeze for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ProgramParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Freeze for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Freeze for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for TyParser","synthetic":true,"types":[]}];
implementors["chalk_recursive"] = [{"text":"impl Freeze for Outcome","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Obligation&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PositiveSolution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NegativeSolution","synthetic":true,"types":[]},{"text":"impl&lt;'s, I, Solver&gt; Freeze for Fulfill&lt;'s, I, Solver&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RecursiveContext&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Freeze for Solver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RecursiveSolver&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SearchGraph&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DepthFirstNumber","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Node&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Stack","synthetic":true,"types":[]},{"text":"impl Freeze for StackDepth","synthetic":true,"types":[]},{"text":"impl Freeze for StackEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Minimums","synthetic":true,"types":[]}];
implementors["chalk_solve"] = [{"text":"impl&lt;'me, I&gt; Freeze for ClauseBuilder&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for UnsizeParameterCollector&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'p, I&gt; Freeze for ParameterOccurenceCheck&lt;'a, 'p, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, 'builder, I&gt; Freeze for EnvElaborator&lt;'me, 'builder, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for Generalize&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for CoherenceSolver&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CoherenceError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SpecializationPriorities&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SpecializationPriority","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; Freeze for DisplayRenderAsRust&lt;'a, I, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InvertedBoundVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for UnifiedId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IdAliasStore&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for IdAliases&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, DB:&nbsp;?Sized, P&gt; Freeze for WriterState&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for InternalWriterState&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB&gt; Freeze for StubWrapper&lt;'a, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for GoalBuilder&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Canonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Freeze for Canonicalizer&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Freeze for Inverter&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UCanonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, 'i, I&gt; Freeze for UCollector&lt;'q, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Freeze for UMapToCanonical&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Freeze for UMapFromCanonical&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; Freeze for Unifier&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RelationResult&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'u, 't, I&gt; Freeze for OccursCheck&lt;'u, 't, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for EnaVariable&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for InferenceValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for InferenceTable&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for InferenceSnapshot&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, DB&gt; Freeze for IdCollector&lt;'i, I, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, DB, P&nbsp;=&nbsp;DB&gt; !Freeze for LoggingRustIrDatabase&lt;I, DB, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, W, DB, P&nbsp;=&nbsp;DB&gt; !Freeze for WriteOnDropRustIrDatabase&lt;I, W, DB, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RecordedItemId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DefId, AdtId&gt; Freeze for OrderedItemId&lt;'a, DefId, AdtId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AssociatedTyValueId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ImplType","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DefaultImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DefaultImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AdtDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AdtKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AdtDatumBound&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AdtVariantDatum&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AdtFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AdtRepr&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnDefDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnDefInputsAndOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FnDefDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TraitDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TraitDatumBound&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TraitFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for InlineBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TraitBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AliasEqBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AssociatedTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::Identifier: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AssociatedTyDatumBound&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AssociatedTyValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for AssociatedTyValueBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for OpaqueTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for OpaqueTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Movability","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GeneratorDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GeneratorInputOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GeneratorWitnessDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for GeneratorWitnessExistential&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Polarity","synthetic":true,"types":[]},{"text":"impl Freeze for ClosureKind","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'i, I&gt; Freeze for TySizeVisitor&lt;'infer, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Solution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Guidance&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for SolutionDisplay&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SubstitutionResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WfError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for WfSolver&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Freeze for InputTypeCollector&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WfWellKnownConstraints","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()