(function() {var implementors = {};
implementors["chalk"] = [{"text":"impl Unpin for Args","synthetic":true,"types":[]},{"text":"impl Unpin for LoadedProgram","synthetic":true,"types":[]}];
implementors["chalk_derive"] = [{"text":"impl Unpin for DeriveKind","synthetic":true,"types":[]}];
implementors["chalk_engine"] = [{"text":"impl&lt;I&gt; Unpin for AnswerResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Forest&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Unpin for ForestSolver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for RootSearchFail","synthetic":true,"types":[]},{"text":"impl Unpin for SubGoalSelection","synthetic":true,"types":[]},{"text":"impl Unpin for NoRemainingSubgoalsResult","synthetic":true,"types":[]},{"text":"impl&lt;'forest, I&gt; Unpin for SolveState&lt;'forest, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'table, 'i, I&gt; Unpin for DeepNormalizer&lt;'table, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'intern, I&gt; Unpin for AntiUnifier&lt;'infer, 'intern, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; Unpin for AnswerSubstitutor&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SlgContext&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Unpin for SlgContextOps&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for MayInvalidate&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SLGSolver&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Stack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for StackDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for StackIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for StackEntry&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Strand&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SelectedSubgoal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Table&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AnswerIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Tables&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TableIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ExClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TimeStamp","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FlounderedSubgoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Answer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for CompleteAnswer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Literal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Minimums","synthetic":true,"types":[]},{"text":"impl Unpin for AnswerMode","synthetic":true,"types":[]}];
implementors["chalk_integration"] = [{"text":"impl Unpin for ChalkDatabase","synthetic":true,"types":[]},{"text":"impl Unpin for ChalkError","synthetic":true,"types":[]},{"text":"impl Unpin for RustIrError","synthetic":true,"types":[]},{"text":"impl Unpin for RawId","synthetic":true,"types":[]},{"text":"impl Unpin for ChalkFnAbi","synthetic":true,"types":[]},{"text":"impl Unpin for ChalkIr","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Unpin for Env&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for AssociatedTyLookup","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Unpin for TypeLookup&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ProgramLowerer","synthetic":true,"types":[]},{"text":"impl Unpin for Program","synthetic":true,"types":[]},{"text":"impl Unpin for ProgramEnvironment","synthetic":true,"types":[]},{"text":"impl Unpin for Lowering","synthetic":true,"types":[]},{"text":"impl Unpin for ProgramTextQuery","synthetic":true,"types":[]},{"text":"impl Unpin for SolverChoiceQuery","synthetic":true,"types":[]},{"text":"impl Unpin for ProgramIrQuery","synthetic":true,"types":[]},{"text":"impl Unpin for CoherenceQuery","synthetic":true,"types":[]},{"text":"impl Unpin for OrphanCheckQuery","synthetic":true,"types":[]},{"text":"impl Unpin for CheckedProgramQuery","synthetic":true,"types":[]},{"text":"impl Unpin for EnvironmentQuery","synthetic":true,"types":[]},{"text":"impl Unpin for SolverQuery","synthetic":true,"types":[]},{"text":"impl Unpin for LoweringDatabaseGroupStorage__","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ArcEq&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TypeSort","synthetic":true,"types":[]},{"text":"impl Unpin for Unit","synthetic":true,"types":[]},{"text":"impl Unpin for TypeKind","synthetic":true,"types":[]},{"text":"impl Unpin for SolverChoice","synthetic":true,"types":[]}];
implementors["chalk_ir"] = [{"text":"impl&lt;T, U&gt; Unpin for VecMappedInPlace&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for Shifter&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for DownShifter&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'i, I&gt; Unpin for Subst&lt;'s, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for FindFreeVarsVisitor&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Unpin for ControlFlow&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, IT, U&gt; Unpin for Casted&lt;'i, IT, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IT: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for VariableKindsDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for VariableKindsInnerDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for GoalsDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for GenericArgDataInnerDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for ProgramClauseImplicationDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for TyKindDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for SubstitutionDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Unpin for SeparatorTraitRef&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'me, I&gt; Unpin for SeparatorTraitRefDebug&lt;'a, 'me, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'me: 'a,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for ProjectionTyDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for OpaqueTyDebug&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Angle&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for CanonicalDisplay&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Void","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FallibleOrFloundered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NoSolution","synthetic":true,"types":[]},{"text":"impl Unpin for Floundered","synthetic":true,"types":[]},{"text":"impl Unpin for Variance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Environment&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Unpin for InEnvironment&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;G as HasInterner&gt;::Interner as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IntTy","synthetic":true,"types":[]},{"text":"impl Unpin for UintTy","synthetic":true,"types":[]},{"text":"impl Unpin for FloatTy","synthetic":true,"types":[]},{"text":"impl Unpin for Scalar","synthetic":true,"types":[]},{"text":"impl Unpin for Safety","synthetic":true,"types":[]},{"text":"impl Unpin for Mutability","synthetic":true,"types":[]},{"text":"impl Unpin for UniverseIndex","synthetic":true,"types":[]},{"text":"impl Unpin for UniverseMap","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AdtId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TraitId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ImplId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ClauseId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AssocTypeId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for OpaqueTyId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ClosureId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GeneratorId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ForeignDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Ty&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TyData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TypeFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TyKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BoundVar","synthetic":true,"types":[]},{"text":"impl Unpin for DebruijnIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DynTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for InferenceVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnSig&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnPointer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Const&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ConstData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ConstValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ConcreteConst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Lifetime&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for LifetimeData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PlaceholderIndex","synthetic":true,"types":[]},{"text":"impl Unpin for TyVariableKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for VariableKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GenericArg&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GenericArgData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Unpin for WithKind&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AliasTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ProjectionTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for OpaqueTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TraitRef&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for LifetimeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TypeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WhereClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WellFormed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FromEnv&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DomainGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for EqGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SubtypeGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Normalize&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AliasEq&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Binders&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Unpin for BindersIntoIterator&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;V as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as IntoIterator&gt;::IntoIter: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ProgramClauseImplication&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ClausePriority","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ProgramClauseData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ProgramClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClause: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Canonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for UCanonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Goal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GoalData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for QuantifierKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Constraint&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, A&gt; Unpin for SubstFolder&lt;'i, I, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for QuantifiedWhereClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ProgramClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for VariableKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for CanonicalVarKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Goals&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Constraints&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Substitution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Variances&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariances: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ConstrainedSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AnswerSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chalk_parse"] = [{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for Program","synthetic":true,"types":[]},{"text":"impl Unpin for Item","synthetic":true,"types":[]},{"text":"impl Unpin for ForeignDefn","synthetic":true,"types":[]},{"text":"impl Unpin for AdtDefn","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for Movability","synthetic":true,"types":[]},{"text":"impl Unpin for GeneratorDefn","synthetic":true,"types":[]},{"text":"impl Unpin for AdtFlags","synthetic":true,"types":[]},{"text":"impl Unpin for AdtKind","synthetic":true,"types":[]},{"text":"impl Unpin for AdtReprAttr","synthetic":true,"types":[]},{"text":"impl Unpin for AdtRepr","synthetic":true,"types":[]},{"text":"impl Unpin for FnSig","synthetic":true,"types":[]},{"text":"impl Unpin for FnDefn","synthetic":true,"types":[]},{"text":"impl Unpin for ClosureDefn","synthetic":true,"types":[]},{"text":"impl Unpin for FnAbi","synthetic":true,"types":[]},{"text":"impl Unpin for TraitDefn","synthetic":true,"types":[]},{"text":"impl Unpin for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl Unpin for TraitFlags","synthetic":true,"types":[]},{"text":"impl Unpin for AssocTyDefn","synthetic":true,"types":[]},{"text":"impl Unpin for OpaqueTyDefn","synthetic":true,"types":[]},{"text":"impl Unpin for VariableKind","synthetic":true,"types":[]},{"text":"impl Unpin for GenericArg","synthetic":true,"types":[]},{"text":"impl Unpin for Const","synthetic":true,"types":[]},{"text":"impl Unpin for InlineBound","synthetic":true,"types":[]},{"text":"impl Unpin for QuantifiedInlineBound","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBound","synthetic":true,"types":[]},{"text":"impl Unpin for AliasEqBound","synthetic":true,"types":[]},{"text":"impl Unpin for Kind","synthetic":true,"types":[]},{"text":"impl Unpin for Impl","synthetic":true,"types":[]},{"text":"impl Unpin for ImplType","synthetic":true,"types":[]},{"text":"impl Unpin for AssocTyValue","synthetic":true,"types":[]},{"text":"impl Unpin for Ty","synthetic":true,"types":[]},{"text":"impl Unpin for IntTy","synthetic":true,"types":[]},{"text":"impl Unpin for UintTy","synthetic":true,"types":[]},{"text":"impl Unpin for FloatTy","synthetic":true,"types":[]},{"text":"impl Unpin for ScalarType","synthetic":true,"types":[]},{"text":"impl Unpin for Mutability","synthetic":true,"types":[]},{"text":"impl Unpin for Safety","synthetic":true,"types":[]},{"text":"impl Unpin for Lifetime","synthetic":true,"types":[]},{"text":"impl Unpin for ProjectionTy","synthetic":true,"types":[]},{"text":"impl Unpin for TraitRef","synthetic":true,"types":[]},{"text":"impl Unpin for Polarity","synthetic":true,"types":[]},{"text":"impl Unpin for Identifier","synthetic":true,"types":[]},{"text":"impl Unpin for WhereClause","synthetic":true,"types":[]},{"text":"impl Unpin for DomainGoal","synthetic":true,"types":[]},{"text":"impl Unpin for LeafGoal","synthetic":true,"types":[]},{"text":"impl Unpin for QuantifiedWhereClause","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for Clause","synthetic":true,"types":[]},{"text":"impl Unpin for Goal","synthetic":true,"types":[]},{"text":"impl Unpin for ClosureKind","synthetic":true,"types":[]},{"text":"impl Unpin for FnArg","synthetic":true,"types":[]},{"text":"impl Unpin for FnArgs","synthetic":true,"types":[]},{"text":"impl Unpin for Variance","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Unpin for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Unpin for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GoalParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Unpin for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Unpin for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ProgramParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Unpin for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Unpin for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TyParser","synthetic":true,"types":[]}];
implementors["chalk_recursive"] = [{"text":"impl Unpin for Outcome","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Obligation&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for PositiveSolution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NegativeSolution","synthetic":true,"types":[]},{"text":"impl&lt;'s, I, Solver&gt; Unpin for Fulfill&lt;'s, I, Solver&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for RecursiveContext&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; Unpin for Solver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for RecursiveSolver&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SearchGraph&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DepthFirstNumber","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Node&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Stack","synthetic":true,"types":[]},{"text":"impl Unpin for StackDepth","synthetic":true,"types":[]},{"text":"impl Unpin for StackEntry","synthetic":true,"types":[]},{"text":"impl Unpin for Minimums","synthetic":true,"types":[]}];
implementors["chalk_solve"] = [{"text":"impl&lt;'me, I&gt; Unpin for ClauseBuilder&lt;'me, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for UnsizeParameterCollector&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'p, I&gt; Unpin for ParameterOccurenceCheck&lt;'a, 'p, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'me, 'builder, I&gt; Unpin for EnvElaborator&lt;'me, 'builder, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'me: 'builder,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for Generalize&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for CoherenceSolver&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for CoherenceError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SpecializationPriorities&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SpecializationPriority","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; Unpin for DisplayRenderAsRust&lt;'a, I, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for InvertedBoundVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for UnifiedId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IdAliasStore&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for IdAliases&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, DB:&nbsp;?Sized, P&gt; Unpin for WriterState&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Unpin for InternalWriterState&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB&gt; Unpin for StubWrapper&lt;'a, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for GoalBuilder&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Canonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasInterner&gt;::Interner: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Unpin for Canonicalizer&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Unpin for Inverter&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for UCanonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, 'i, I&gt; Unpin for UCollector&lt;'q, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Unpin for UMapToCanonical&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; Unpin for UMapFromCanonical&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; Unpin for Unifier&lt;'t, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for RelationResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'u, 't, I&gt; Unpin for OccursCheck&lt;'u, 't, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;'t: 'u,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for EnaVariable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for InferenceValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for InferenceTable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for InferenceSnapshot&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, DB&gt; Unpin for IdCollector&lt;'i, I, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, DB, P&gt; Unpin for LoggingRustIrDatabase&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, W, DB, P&gt; Unpin for WriteOnDropRustIrDatabase&lt;I, W, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for RecordedItemId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DefId, AdtId&gt; Unpin for OrderedItemId&lt;'a, DefId, AdtId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AssociatedTyValueId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ImplType","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DefaultImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DefaultImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AdtDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AdtKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AdtDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AdtVariantDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AdtFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AdtRepr&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnDefDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnDefInputsAndOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FnDefDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TraitDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TraitDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TraitFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for InlineBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for TraitBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AliasEqBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AssociatedTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::Identifier: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AssociatedTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AssociatedTyValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for AssociatedTyValueBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for OpaqueTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for OpaqueTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Movability","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GeneratorDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GeneratorInputOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GeneratorWitnessDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for GeneratorWitnessExistential&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Polarity","synthetic":true,"types":[]},{"text":"impl Unpin for ClosureKind","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'i, I&gt; Unpin for TySizeVisitor&lt;'infer, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Solution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Guidance&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for SolutionDisplay&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for SubstitutionResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WfError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for WfSolver&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; Unpin for InputTypeCollector&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for WfWellKnownConstraints","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()