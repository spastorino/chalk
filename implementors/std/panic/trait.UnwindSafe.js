(function() {var implementors = {};
implementors["chalk"] = [{"text":"impl UnwindSafe for Args","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoadedProgram","synthetic":true,"types":[]}];
implementors["chalk_derive"] = [{"text":"impl UnwindSafe for DeriveKind","synthetic":true,"types":[]}];
implementors["chalk_engine"] = [{"text":"impl&lt;I&gt; UnwindSafe for AnswerResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Forest&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; !UnwindSafe for ForestSolver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RootSearchFail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubGoalSelection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoRemainingSubgoalsResult","synthetic":true,"types":[]},{"text":"impl&lt;'forest, I&gt; !UnwindSafe for SolveState&lt;'forest, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'table, 'i, I&gt; !UnwindSafe for DeepNormalizer&lt;'table, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'intern, I&gt; !UnwindSafe for AntiUnifier&lt;'infer, 'intern, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; !UnwindSafe for AnswerSubstitutor&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SlgContext&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; !UnwindSafe for SlgContextOps&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; UnwindSafe for MayInvalidate&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SLGSolver&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Stack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for StackDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StackEntry&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Strand&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectedSubgoal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Table&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnswerIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Tables&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ExClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeStamp","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FlounderedSubgoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Answer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CompleteAnswer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Literal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Minimums","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnswerMode","synthetic":true,"types":[]}];
implementors["chalk_integration"] = [{"text":"impl UnwindSafe for ChalkDatabase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChalkError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RustIrError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChalkFnAbi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChalkIr","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; UnwindSafe for Env&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssociatedTyLookup","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; UnwindSafe for TypeLookup&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgramLowerer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgramEnvironment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lowering","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgramTextQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SolverChoiceQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgramIrQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoherenceQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrphanCheckQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckedProgramQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvironmentQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SolverQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoweringDatabaseGroupStorage__","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ArcEq&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SolverChoice","synthetic":true,"types":[]}];
implementors["chalk_ir"] = [{"text":"impl&lt;T, U&gt; UnwindSafe for VecMappedInPlace&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; UnwindSafe for Shifter&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; UnwindSafe for DownShifter&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'i, I&gt; UnwindSafe for Subst&lt;'s, 'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; UnwindSafe for FindFreeVarsVisitor&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; UnwindSafe for ControlFlow&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, IT, U&gt; UnwindSafe for Casted&lt;'i, IT, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IT: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as HasInterner&gt;::Interner: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for VariableKindsDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for VariableKindsInnerDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for GoalsDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for GenericArgDataInnerDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for ProgramClauseImplicationDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for TyKindDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for SubstitutionDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; UnwindSafe for SeparatorTraitRef&lt;'me, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'me, I&gt; UnwindSafe for SeparatorTraitRefDebug&lt;'a, 'me, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for ProjectionTyDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for OpaqueTyDebug&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Angle&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CanonicalDisplay&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasInterner&gt;::Interner: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Void","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FallibleOrFloundered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoSolution","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Floundered","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variance","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Environment&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for InEnvironment&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;G as HasInterner&gt;::Interner as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Safety","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mutability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniverseIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniverseMap","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AdtId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TraitId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ImplId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ClauseId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AssocTypeId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for OpaqueTyId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ClosureId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GeneratorId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ForeignDefId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Ty&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TyData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TyKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebruijnIndex","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DynTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InferenceVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnSig&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnPointer&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Const&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ConstData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ConstValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ConcreteConst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConcreteConst: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Lifetime&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for LifetimeData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlaceholderIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TyVariableKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for VariableKind&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GenericArg&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GenericArgData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for WithKind&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AliasTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ProjectionTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for OpaqueTy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TraitRef&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for LifetimeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TypeOutlives&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhereClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WellFormed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FromEnv&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DomainGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for EqGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SubtypeGoal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Normalize&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AliasEq&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Binders&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for BindersIntoIterator&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;V as HasInterner&gt;::Interner as Interner&gt;::InternedVariableKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as IntoIterator&gt;::IntoIter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ProgramClauseImplication&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClausePriority","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ProgramClauseData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ProgramClause&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClause: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Canonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for UCanonical&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Goal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GoalData&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuantifierKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Constraint&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, A&gt; UnwindSafe for SubstFolder&lt;'i, I, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for QuantifiedWhereClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedQuantifiedWhereClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ProgramClauses&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for VariableKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CanonicalVarKinds&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Goals&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoals: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Constraints&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Substitution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Variances&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariances: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ConstrainedSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AnswerSubst&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chalk_parse"] = [{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Program","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Movability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneratorDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtReprAttr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtRepr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClosureDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnAbi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssocTyDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueTyDefn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InlineBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuantifiedInlineBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AliasEqBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssocTyValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScalarType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mutability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Safety","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProjectionTy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Polarity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DomainGoal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeafGoal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuantifiedWhereClause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Clause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Goal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClosureKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variance","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GoalParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgramParser","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for __Symbol&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; UnwindSafe for __StateMachine&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TyParser","synthetic":true,"types":[]}];
implementors["chalk_recursive"] = [{"text":"impl UnwindSafe for Outcome","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Obligation&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PositiveSolution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NegativeSolution","synthetic":true,"types":[]},{"text":"impl&lt;'s, I, Solver&gt; !UnwindSafe for Fulfill&lt;'s, I, Solver&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for RecursiveContext&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, I&gt; !UnwindSafe for Solver&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for RecursiveSolver&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SearchGraph&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepthFirstNumber","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Node&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackDepth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Minimums","synthetic":true,"types":[]}];
implementors["chalk_solve"] = [{"text":"impl&lt;'me, I&gt; !UnwindSafe for ClauseBuilder&lt;'me, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for UnsizeParameterCollector&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'p, I&gt; UnwindSafe for ParameterOccurenceCheck&lt;'a, 'p, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'me, 'builder, I&gt; !UnwindSafe for EnvElaborator&lt;'me, 'builder, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; UnwindSafe for Generalize&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for CoherenceSolver&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CoherenceError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SpecializationPriorities&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecializationPriority","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; !UnwindSafe for DisplayRenderAsRust&lt;'a, I, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvertedBoundVar","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for UnifiedId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IdAliasStore&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IdAliases&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, DB:&nbsp;?Sized, P&gt; UnwindSafe for WriterState&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for InternalWriterState&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB&gt; UnwindSafe for StubWrapper&lt;'a, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; !UnwindSafe for GoalBuilder&lt;'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Canonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasInterner&gt;::Interner: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; !UnwindSafe for Canonicalizer&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; !UnwindSafe for Inverter&lt;'q, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for UCanonicalized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as HasInterner&gt;::Interner as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, 'i, I&gt; !UnwindSafe for UCollector&lt;'q, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; UnwindSafe for UMapToCanonical&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q, I&gt; UnwindSafe for UMapFromCanonical&lt;'q, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t, I&gt; !UnwindSafe for Unifier&lt;'t, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for RelationResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGoal: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedProgramClauses: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'u, 't, I&gt; !UnwindSafe for OccursCheck&lt;'u, 't, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for EnaVariable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for InferenceValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for InferenceTable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for InferenceSnapshot&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, I, DB&gt; UnwindSafe for IdCollector&lt;'i, I, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, DB, P&gt; UnwindSafe for LoggingRustIrDatabase&lt;I, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, W, DB, P&gt; UnwindSafe for WriteOnDropRustIrDatabase&lt;I, W, DB, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for RecordedItemId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DefId, AdtId&gt; UnwindSafe for OrderedItemId&lt;'a, DefId, AdtId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AdtId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AssociatedTyValueId&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplType","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DefaultImplDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DefaultImplDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AdtDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AdtDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AdtVariantDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdtFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AdtRepr&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnDefDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::FnAbi: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnDefInputsAndOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FnDefDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TraitDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WellKnownTrait","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TraitDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitFlags","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for InlineBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TraitBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AliasEqBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AssociatedTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::Identifier: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AssociatedTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedGenericArg: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AssociatedTyValue&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for AssociatedTyValueBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for OpaqueTyDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for OpaqueTyDatumBound&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedLifetime: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Movability","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GeneratorDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GeneratorInputOutputDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GeneratorWitnessDatum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for GeneratorWitnessExistential&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedVariableKinds: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Polarity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClosureKind","synthetic":true,"types":[]},{"text":"impl&lt;'infer, 'i, I&gt; !UnwindSafe for TySizeVisitor&lt;'infer, 'i, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Solution&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Guidance&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for SolutionDisplay&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedCanonicalVarKinds: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedConstraints: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedSubstitution: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SubstitutionResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WfError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::DefId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedAdtId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for WfSolver&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, I&gt; UnwindSafe for InputTypeCollector&lt;'i, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Interner&gt;::InternedType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WfWellKnownConstraints","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()